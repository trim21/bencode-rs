name: ci

on:
  pull_request:
    branches:
      - master
  workflow_dispatch:
  push:
    branches:
      - master
    tags-ignore:
      - "*"

jobs:
  build:
    concurrency:
      group: "${{ github.workflow }}-${{ github.ref }}"
      cancel-in-progress: true
    uses: ./.github/workflows/_build_wheels.yaml

  cargo-fmt:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt,clippy
      - run: cargo fmt --check --all
      - run: cargo clippy

  test:
    strategy:
      matrix:
        os: ["ubuntu-24.04", "macos-13", "macos-14", "windows-latest"]
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"

    runs-on: "${{ matrix.os }}"

    needs: [build]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4.1.8
        with:
          name: wheel
          path: dist

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip" # caching pip dependencies

      - run: python -m pip install -U pip
      - run: pip install bencode-rs --no-index --find-link ./dist/
      - run: pip install -r requirements.txt

      - run: pytest -sv
        env:
          RUST_BACKTRACE: 'full'

  bench-cp:
    strategy:
      matrix:
        python-version:
          - "3.10"

    runs-on: "ubuntu-24.04"

    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - run: pip install -r requirements.txt
      - run: maturin build --release --out dist
      - run: pip install bencode-rs --no-index --find-links ./dist/

      - name: Run benchmarks
        uses: CodSpeedHQ/action@v3
        with:
          token: ${{ secrets.CODSPEED_TOKEN }}
          run: python -m pytest tests/bench.py --codspeed

  audit:
    name: Audit
    needs: [build]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache: "pip" # caching pip dependencies

      - run: pip install -r requirements.txt

      - uses: actions/download-artifact@v4
        with:
          name: wheel
          path: dist

      - run: abi3audit --verbose dist/*.whl
      - run: pipx run twine check --strict dist/*


  coverage:
    name: Coverage for ${{ matrix.python-version }}
    strategy:
      matrix:
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"

    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"
          cache: "pip"

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: llvm-tools

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - run: pip install -r requirements.txt

      - name: Run coverage
        run: |
          set -euxo pipefail
          source <(cargo llvm-cov show-env --export-prefix)
          export CARGO_TARGET_DIR=$CARGO_LLVM_COV_TARGET_DIR
          cargo llvm-cov clean --workspace
          cargo build
          ls target/debug -ahl
          cp target/debug/libbencode.so py/bencode_rs/_bencode.so
          PYTHONPATH=py pytest tests
          cargo llvm-cov report --lcov --output-path coverage.lcov

      - uses: codecov/codecov-action@v5
        with:
          files: coverage.lcov
          token: '${{ secrets.CODECOV_TOKEN }}'
