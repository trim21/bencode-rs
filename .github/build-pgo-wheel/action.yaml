name: Build PGO wheel
description: Builds a PGO-optimized wheel
inputs:
  interpreter:
    description: 'Interpreter to build the wheel for'
    required: true

  rust-toolchain:
    description: "rust toolchain version"
    required: false
    default: '1.83'

outputs:
  wheel:
    description: 'Path to the built wheel'
    value: ${{ steps.find_wheel.outputs.path }}

runs:
  using: "composite"
  steps:
    - name: prepare profiling directory
      shell: bash
      run: mkdir -p ${{ github.workspace }}/profdata

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.interpreter }}
        cache: "pip"

    - name: build initial wheel
      uses: PyO3/maturin-action@v1
      with:
        manylinux: auto
        args: >
          --release
          --out pgo-wheel
          --interpreter ${{ inputs.interpreter }}
        docker-options: -e CI
        rust-toolchain: ${{ inputs.rust-toolchain }}
      env:
        RUSTFLAGS: '-Cprofile-generate=${{ github.workspace }}/profdata'

    - uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: '${{ inputs.rust-toolchain }}'
        components: llvm-tools-preview

    - name: detect rust host
      run: |
        echo RUST_HOST=$(rustc -Vv | grep host | cut -d ' ' -f 2) >> "$GITHUB_ENV"
      shell: bash

    - run: |
        RUST_HOST=$(rustc -Vv | grep host | cut -d ' ' -f 2)
        rustup run ${{ inputs.rust-toolchain }} bash -c 'echo LLVM_PROFDATA=$RUSTUP_HOME/toolchains/$RUSTUP_TOOLCHAIN/lib/rustlib/${RUST_HOST}bin/llvm-profdata >> "$GITHUB_ENV"'
      shell: bash


    - name: generate pgo data
      run: |
        pip install -r ./requirements.txt
        pip install bencode-rs --no-index --find-link pgo-wheel/
        pytest tests/bench.py
      shell: bash

    - name: merge pgo data
      run: ${{ env.LLVM_PROFDATA }} merge -o ${{ github.workspace }}/merged.profdata ${{ github.workspace }}/profdata
      shell: bash

    - name: build pgo-optimized wheel
      uses: PyO3/maturin-action@v1
      with:
        manylinux: auto
        args: >
          --release
          --out dist
          --interpreter ${{ inputs.interpreter }}
        docker-options: -e CI
        rust-toolchain: ${{ inputs.rust-toolchain }}
      env:
        RUSTFLAGS: '-Cprofile-use=${{ github.workspace }}/merged.profdata'
